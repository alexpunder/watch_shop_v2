# Generated by Django 4.2 on 2024-05-19 10:35

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AvailabilityChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('Имеются в наличии', 'Имеются в наличии'), ('Уточнить у менеджера', 'Уточнить у менеджера')], max_length=255, unique=True, verbose_name='Наличие')),
            ],
            options={
                'verbose_name': 'Наличие',
                'verbose_name_plural': 'Наличие',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True, verbose_name='Бренд')),
            ],
            options={
                'verbose_name': 'Бренд',
                'verbose_name_plural': 'Бренды',
                'ordering': ['-title'],
            },
        ),
        migrations.CreateModel(
            name='ConditionChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('Идеальное', 'Идеальное'), ('Как новые', 'Как новые'), ('Коллекционное состояние', 'Коллекционное состояние'), ('Абсолютно новые', 'Абсолютно новые'), ('Отличное', 'Отличное'), ('Хорошее', 'Хорошее')], max_length=255, unique=True, verbose_name='Состояние')),
            ],
            options={
                'verbose_name': 'Состояние',
                'verbose_name_plural': 'Состояния',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ForWho',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('Не задано', 'Не задано'), ('Мужские', 'Мужские'), ('Женские', 'Женские'), ('Унисекс', 'Унисекс')], max_length=255, unique=True, verbose_name='Для кого')),
            ],
            options={
                'verbose_name': 'Для кого',
                'verbose_name_plural': 'Для кого',
                'ordering': ['-title'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('Желтое золото', 'Желтое золото'), ('Розовое золото', 'Розовое золото'), ('Белое золото', 'Белое золото'), ('Платина', 'Платина'), ('Титан', 'Титан'), ('Сталь', 'Сталь'), ('Карбон', 'Карбон'), ('Керамика', 'Керамика'), ('Прочие материалы', 'Прочие материалы')], max_length=255, unique=True, verbose_name='Материал корпуса')),
            ],
            options={
                'verbose_name': 'Материал корпуса',
                'verbose_name_plural': 'Материалы корпусов',
                'ordering': ['-title'],
            },
        ),
        migrations.CreateModel(
            name='Shape',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('Овальная', 'Овальная'), ('Круглая', 'Круглая'), ('Квадратная', 'Квадратная'), ('Бочка', 'Бочка')], max_length=255, unique=True, verbose_name='Форма корпуса')),
            ],
            options={
                'verbose_name': 'Форма корпуса',
                'verbose_name_plural': 'Формы корпусов',
                'ordering': ['-title'],
            },
        ),
        migrations.CreateModel(
            name='Special',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(choices=[('Grand комплектация', 'Grand комплектация'), ('Limited editions', 'Limited editions'), ('Special editions', 'Special editions'), ('Акция', 'Акция'), ('Новинка', 'Новинка'), ('Тюнинг', 'Тюнинг')], max_length=255, unique=True, verbose_name='Спецпредложения')),
            ],
            options={
                'verbose_name': 'Спецпредложение',
                'verbose_name_plural': 'Спецпредложения',
                'ordering': ['-title'],
            },
        ),
        migrations.CreateModel(
            name='Watch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Уникальное, обязательное поле.', max_length=255, unique=True, verbose_name='Название часов')),
                ('is_on_main', models.BooleanField(verbose_name='Выводить ли на главной?')),
                ('material_alt', models.CharField(help_text='Для лучшего отображения на детальной странице часов. Обязательное поле.', max_length=255, verbose_name='Материал корпуса')),
                ('price', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1, message='Цена не может быть ниже 1')], verbose_name='Цена часов')),
                ('type', models.CharField(blank=True, help_text='Например: "Классические". Необязательное поле.', max_length=255, null=True, verbose_name='Тип')),
                ('waterproof', models.CharField(blank=True, help_text='Указывать в метрах. Например: "50 м". Необязательное поле.', max_length=255, null=True, verbose_name='Водонепроницаемость')),
                ('diameter', models.CharField(blank=True, help_text='Указывать в миллиметрах. Например: "37 мм". Необязательное поле.', max_length=255, null=True, verbose_name='Диаметр корпуса')),
                ('color', models.CharField(blank=True, help_text='Необязательное поле.', max_length=255, null=True, verbose_name='Цвет циферблата')),
                ('bezel', models.CharField(blank=True, help_text='Внешнее поворотное кольцо вокруг циферблата часов. Необязательное поле.', max_length=255, null=True, verbose_name='Безель')),
                ('glass', models.CharField(blank=True, help_text='Необязательное поле.', max_length=255, null=True, verbose_name='Стекло')),
                ('reserve', models.CharField(blank=True, help_text='Необязательное поле.', max_length=255, null=True, verbose_name='Запас хода')),
                ('caliber', models.CharField(blank=True, help_text='Необязательное поле.', max_length=255, null=True, verbose_name='Калибр')),
                ('mechanism', models.CharField(blank=True, choices=[('Механические', 'Механические'), ('Автоматические', 'Автоматические'), ('Кварцевые', 'Кварцевые')], help_text='Механические, автоматические и кварцевые. Необязательное поле.', max_length=255, null=True, verbose_name='Механизм часов')),
                ('functions', models.CharField(blank=True, help_text='Например: "Дата, часы, минуты, секунды". Необязательное поле.', max_length=255, null=True, verbose_name='Функции')),
                ('strap', models.CharField(blank=True, help_text='Например: "Браслет из желтого золота 18к". Необязательное поле.', max_length=255, null=True, verbose_name='Материал ремешка')),
                ('equipment', models.CharField(blank=True, help_text='Например: "Полный комплект" или "Коробка". Необязательное поле.', max_length=255, null=True, verbose_name='Комплектация')),
                ('date_issue', models.CharField(blank=True, help_text='Необязательное поле.', max_length=255, null=True, verbose_name='Дата выпуска')),
                ('reference', models.CharField(help_text='Уникальное, обязательное поле.', max_length=255, unique=True, verbose_name='Референсный номер')),
                ('image', models.ImageField(blank=True, default=None, help_text='Необязательное поле, но очень желательное. Рекомендуемы размер: 400х400, формат: .webp', null=True, upload_to='watches_images')),
                ('availability', models.ForeignKey(default=1, max_length=255, on_delete=django.db.models.deletion.SET_DEFAULT, to='main.availabilitychoice', verbose_name='Наличие')),
                ('brand', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='main.brand', verbose_name='Бренд')),
                ('condition', models.ForeignKey(default=1, max_length=255, on_delete=django.db.models.deletion.SET_DEFAULT, to='main.conditionchoice', verbose_name='Состояние')),
                ('for_who', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='main.forwho', verbose_name='Для кого')),
                ('material', models.ForeignKey(default=1, help_text='Для фильтра на странице со списком часов.', on_delete=django.db.models.deletion.SET_DEFAULT, to='main.material', verbose_name='Категория материала корпуса')),
                ('shape', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to='main.shape', verbose_name='Форма корпуса')),
                ('special', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.special', verbose_name='Спецпредложения')),
            ],
            options={
                'verbose_name': 'Часы',
                'verbose_name_plural': 'Часы',
                'ordering': ['-id'],
            },
        ),
    ]
